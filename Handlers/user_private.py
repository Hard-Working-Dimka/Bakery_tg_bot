from io import BytesIO

from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton, ReplyKeyboardRemove, InputFile, FSInputFile

from Common.requests_db import request_db_is_ready_cakes
from Keyboards import reply
from Keyboards.reply import (create_keyboard, get_levels_cake, get_shapes_cake, get_decor_cake)


user_private_router = Router()

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}! \n '
                         f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.',
                         reply_markup=reply.keyboard_user_accepted)
    input_file = FSInputFile('Handlers/Agreement.pdf')
    await message.answer_document(document=input_file)


@user_private_router.message(F.text.contains('–û—Ç–∫–ª–æ–Ω–∏—Ç—å'))
async def user_accepted(message: types.Message):
    await message.answer('–ü–æ–∫–∞-–ø–æ–∫–∞ ‚úå', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))


@user_private_router.message(F.text.contains('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'))
async def user_accepted(message: types.Message):
    await message.answer('–Ø –±–æ—Ç cakeSto–ære, –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –≤–∫—É—Å–Ω—ã–π —Ç–æ—Ä—Ç–∏–∫. üéÇüéÇüéÇ',
                         reply_markup=reply.keyboard)


@user_private_router.message(Command('feedback'))
@user_private_router.message(F.text.contains('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))
async def cmd_cake_list(message: types.Message):
    await message.answer(
        '''–î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è:
            <b>–¢–µ–ª–µ—Ñ–æ–Ω</b> : +7123456789
            <b>TG</b> : @dunyakhin 
            <b>Email</b> : support@gmail.com''',
        parse_mode=ParseMode.HTML
    )


@user_private_router.message(Command('payment'))
@user_private_router.message(F.text.contains('–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'))
async def payment(message: types.Message):
    await message.answer('''–ö–∞–∫–æ–π-—Ç–æ —Å–ø–æ—Å–æ–±''')


# FSM for cake
class GetCakes(StatesGroup):
    name = State()
    number = State()
    address = State()
    cake = State()
    date_delivery = State()


@user_private_router.message(Command('cakeslist'))
@user_private_router.message(StateFilter(None), F.text.contains('–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç–∏–∫'))
async def choose_cake(message: types.Message, state: FSMContext, bot: Bot):
    ready_cakes = request_db_is_ready_cakes()
    keyboard_for_choose_cake = ReplyKeyboardBuilder()
    for cake in ready_cakes:
        if not cake['name'] == '–ö–∞—Å—Ç–æ–º–Ω—ã–π':
            keyboard_for_choose_cake.add(KeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å {cake['name']}"))
            keyboard_for_choose_cake.adjust(1)
            await message.answer(
                text=f'''<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {cake['name']}.
                    \n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {cake['description']}.
                    \n<b>–°–æ—Å—Ç–∞–≤</b>: {cake['ingredients']}.
                    \n<b>–¶–µ–Ω–∞</b>: {cake['price']}.
                    \n<b>–§–æ—Ç–æ</b>: {cake['photo']}''', parse_mode=ParseMode.HTML,
                reply_markup=keyboard_for_choose_cake.as_markup(resize_keyboard=True))
    await state.set_state(GetCakes.cake)


@user_private_router.message(GetCakes.cake, F.text)
async def get_user_info_cake(message: types.Message, state: FSMContext):
    await state.update_data(cake=message.text)
    await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await state.set_state(GetCakes.number)


@user_private_router.message(GetCakes.number, F.text)
async def get_user_info_number(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')
    await state.set_state(GetCakes.address)


@user_private_router.message(GetCakes.address, F.text)
async def get_user_info_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
    await state.set_state(GetCakes.name)


@user_private_router.message(GetCakes.name, F.text)
async def get_user_info_address(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏(+20% –µ—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤):')
    await state.set_state(GetCustomCakes.date_delivery)


@user_private_router.message(GetCakes.date_delivery, F.text)
async def got_offer(message: types.Message, state: FSMContext):
    await state.update_data(date_delivery=message.text)
    await message.answer('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Çü§ô', reply_markup=reply.keyboard)
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()


# FSM for custom cakes
class GetCustomCakes(StatesGroup):
    name = State()
    address = State()
    number = State()
    levels = State()
    form = State()
    decor = State()
    title = State()
    date_delivery = State()


@user_private_router.message(Command('customcake'))
@user_private_router.message(StateFilter(None), F.text.contains('–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π —Ç–æ—Ä—Ç–∏–∫'))
async def custom_cake(message: types.Message, state: FSMContext):
    ready_cakes = request_db_is_ready_cakes()
    for cake in ready_cakes:
        if cake['name'] == '–ö–∞—Å—Ç–æ–º–Ω—ã–π':
            await message.answer(
                text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π', reply_markup=create_keyboard(get_levels_cake()))
    await state.set_state(GetCustomCakes.levels)


@user_private_router.message(GetCustomCakes.levels, F.text)
async def choose_levels(message: types.Message, state: FSMContext):
    await state.update_data(levels=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É', reply_markup=create_keyboard(get_shapes_cake()))
    await state.set_state(GetCustomCakes.form)


@user_private_router.message(GetCustomCakes.form, F.text)
async def choose_decor(message: types.Message, state: FSMContext):
    await state.update_data(form=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∫–æ—Ä', reply_markup=create_keyboard(get_decor_cake()))
    await state.set_state(GetCustomCakes.decor)


@user_private_router.message(GetCustomCakes.decor, F.text)
async def get_user_name_for_custom_cake(message: types.Message, state: FSMContext):
    await state.update_data(decor=message.text)
    await message.answer('–í—ã —Å–æ–±—Ä–∞–ª–∏ —Å–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç.\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:',
                         reply_markup=ReplyKeyboardRemove(remove_keyboard=True))
    await state.set_state(GetCustomCakes.name)


@user_private_router.message(GetCustomCakes.name, F.text)
async def get_user_address_for_custom_cake(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')
    await state.set_state(GetCustomCakes.address)


@user_private_router.message(GetCustomCakes.address, F.text)
async def get_user_number_for_custom_cake(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await state.set_state(GetCustomCakes.number)


@user_private_router.message(GetCustomCakes.number, F.text)
async def get_user_info_address(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏(+20% –µ—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤):')
    await state.set_state(GetCustomCakes.date_delivery)


@user_private_router.message(GetCustomCakes.date_delivery, F.text)
async def get_user_info_address(message: types.Message, state: FSMContext):
    await state.update_data(date_delivery=message.text)
    await message.answer('–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Çü§ô', reply_markup=reply.keyboard)
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()